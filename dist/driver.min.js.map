{"version":3,"file":"driver.min.js","sources":["webpack://Driver/webpack/universalModuleDefinition","webpack://Driver/webpack/bootstrap","webpack://Driver/./src/common/constants.js","webpack://Driver/./src/common/utils.js","webpack://Driver/./src/core/element.js","webpack://Driver/./src/core/overlay.js","webpack://Driver/./src/core/popover.js","webpack://Driver/./src/core/position.js","webpack://Driver/./src/core/stage.js","webpack://Driver/./src/driver.scss","webpack://Driver/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Driver\"] = factory();\n\telse\n\t\troot[\"Driver\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const OVERLAY_OPACITY = 0.75;\nexport const OVERLAY_PADDING = 10;\n\nexport const SHOULD_ANIMATE_OVERLAY = true;\nexport const SHOULD_OUTSIDE_CLICK_CLOSE = true;\nexport const ALLOW_KEYBOARD_CONTROL = true;\nexport const SHOULD_OUTSIDE_CLICK_NEXT = false;\n\nexport const ESC_KEY_CODE = 27;\nexport const LEFT_KEY_CODE = 37;\nexport const RIGHT_KEY_CODE = 39;\n\nexport const ID_OVERLAY = 'driver-page-overlay';\nexport const ID_STAGE = 'driver-highlighted-element-stage';\nexport const ID_POPOVER = 'driver-popover-item';\n\nexport const CLASS_DRIVER_HIGHLIGHTED_ELEMENT = 'driver-highlighted-element';\nexport const CLASS_POSITION_RELATIVE = 'driver-position-relative';\nexport const CLASS_FIX_STACKING_CONTEXT = 'driver-fix-stacking';\n\nexport const CLASS_STAGE_NO_ANIMATION = 'driver-stage-no-animation';\nexport const CLASS_POPOVER_TIP = 'driver-popover-tip';\nexport const CLASS_POPOVER_TITLE = 'driver-popover-title';\nexport const CLASS_POPOVER_DESCRIPTION = 'driver-popover-description';\nexport const CLASS_POPOVER_FOOTER = 'driver-popover-footer';\nexport const CLASS_CLOSE_BTN = 'driver-close-btn';\nexport const CLASS_NEXT_STEP_BTN = 'driver-next-btn';\nexport const CLASS_PREV_STEP_BTN = 'driver-prev-btn';\nexport const CLASS_BTN_DISABLED = 'driver-disabled';\nexport const CLASS_CLOSE_ONLY_BTN = 'driver-close-only-btn';\nexport const CLASS_NAVIGATION_BTNS = 'driver-navigation-btns';\n\n// NOTE: It must match the one set in the animations in CSS file\nexport const ANIMATION_DURATION_MS = 300;\n\n// language=HTML\nexport const POPOVER_HTML = (className = '') => `\n  <div id=\"${ID_POPOVER}\" class=\"${className}\">\n    <div class=\"${CLASS_POPOVER_TIP}\"></div>\n    <div class=\"${CLASS_POPOVER_TITLE}\">Popover Title</div>\n    <div class=\"${CLASS_POPOVER_DESCRIPTION}\">Popover Description</div>\n    <div class=\"driver-clearfix ${CLASS_POPOVER_FOOTER}\">\n      <button class=\"${CLASS_CLOSE_BTN}\">Close</button>\n      <span class=\"driver-btn-group ${CLASS_NAVIGATION_BTNS}\">\n        <button class=\"${CLASS_PREV_STEP_BTN}\">&larr; Previous</button>\n        <button class=\"${CLASS_NEXT_STEP_BTN}\">Next &rarr;</button>\n      </span>\n    </div>\n  </div>`;\n\nexport const OVERLAY_HTML = `<div id=\"${ID_OVERLAY}\"></div>`;\nexport const STAGE_HTML = `<div id=\"${ID_STAGE}\"></div>`;\n","/**\n * Turn a string into a node\n * @param  {String} htmlString to convert\n * @return {HTMLElement|Node}   Converted node element\n */\nexport const createNodeFromString = (htmlString) => {\n  const div = document.createElement('div');\n  div.innerHTML = htmlString.trim();\n\n  // Change this to div.childNodes to support multiple top-level nodes\n  return div.firstChild;\n};\n\n/**\n * Gets the CSS property from the given element\n * @param {HTMLElement|Node} element\n * @param {string} propertyName\n * @param {boolean} prefixVendor\n * @return {string}\n */\nexport const getStyleProperty = (element, propertyName, prefixVendor = false) => {\n  if (prefixVendor) {\n    const prefixes = ['', '-webkit-', '-ms-', 'moz-', '-o-'];\n    for (let counter = 0; counter < prefixes.length; counter++) {\n      const prefixedProperty = prefixes[counter] + propertyName;\n      const foundValue = getStyleProperty(element, prefixedProperty);\n\n      if (foundValue) {\n        return foundValue;\n      }\n    }\n\n    return '';\n  }\n\n  let propertyValue = '';\n\n  if (element.currentStyle) {\n    propertyValue = element.currentStyle[propertyName];\n  } else if (document.defaultView && document.defaultView.getComputedStyle) {\n    propertyValue = document.defaultView\n      .getComputedStyle(element, null)\n      .getPropertyValue(propertyName);\n  }\n\n  return propertyValue && propertyValue.toLowerCase ? propertyValue.toLowerCase() : propertyValue;\n};\n\n/**\n * Checks if the passed element is dom object or not\n * @param element\n * @returns {boolean}\n */\nexport const isDomElement = function (element) {\n  return element && typeof element === 'object' && 'nodeType' in element;\n};\n","import {\n  ANIMATION_DURATION_MS,\n  CLASS_DRIVER_HIGHLIGHTED_ELEMENT,\n  CLASS_FIX_STACKING_CONTEXT,\n  CLASS_POSITION_RELATIVE,\n} from '../common/constants';\nimport { getStyleProperty } from '../common/utils';\nimport Position from './position';\n\n/**\n * Wrapper around DOMElements to enrich them\n * with the functionality necessary\n */\nexport default class Element {\n  /**\n   * DOM element object\n   * @param {Node|HTMLElement} node\n   * @param {Object} options\n   * @param {Popover} popover\n   * @param {Stage} stage\n   * @param {Overlay} overlay\n   * @param {Window} window\n   * @param {Document} document\n   */\n  constructor({\n    node,\n    options,\n    popover,\n    stage,\n    overlay,\n    window,\n    document,\n  } = {}) {\n    this.node = node;\n    this.document = document;\n    this.window = window;\n    this.options = options;\n    this.overlay = overlay;\n    this.popover = popover;\n    this.stage = stage;\n    this.animationTimeout = null;\n  }\n\n  /**\n   * Checks if the current element is visible in viewport\n   * @returns {boolean}\n   * @public\n   */\n  isInView() {\n    let top = this.node.offsetTop;\n    let left = this.node.offsetLeft;\n    const width = this.node.offsetWidth;\n    const height = this.node.offsetHeight;\n\n    let el = this.node;\n\n    while (el.offsetParent) {\n      el = el.offsetParent;\n      top += el.offsetTop;\n      left += el.offsetLeft;\n    }\n\n    return (\n      top >= this.window.pageYOffset\n      && left >= this.window.pageXOffset\n      && (top + height) <= (this.window.pageYOffset + this.window.innerHeight)\n      && (left + width) <= (this.window.pageXOffset + this.window.innerWidth)\n    );\n  }\n\n  /**\n   * Manually scrolls to the position of element if `scrollIntoView` fails\n   * @private\n   */\n  scrollManually() {\n    const elementRect = this.node.getBoundingClientRect();\n    const absoluteElementTop = elementRect.top + this.window.pageYOffset;\n    const middle = absoluteElementTop - (this.window.innerHeight / 2);\n\n    this.window.scrollTo(0, middle);\n  }\n\n  /**\n   * Brings the element to middle of the view port if not in view\n   * @public\n   */\n  bringInView() {\n    /*\n    // If the node is not there or already is in view\n    if (!this.node || this.isInView()) {\n      return;\n    }\n\n    // If browser does not support scrollIntoView\n    if (!this.node.scrollIntoView) {\n      this.scrollManually();\n      return;\n    }\n */\n    try {\n      this.node.scrollIntoViewIfNeeded();\n      /* this.node.scrollIntoView(this.options.scrollIntoViewOptions || {\n        behavior: 'instant',\n        block: 'center',\n      }); */\n    } catch (e) {\n      // `block` option is not allowed in older versions of firefox, scroll manually\n      this.scrollManually();\n    }\n  }\n\n  /**\n   * Gets the calculated position on screen, around which\n   * we need to draw\n   * @public\n   * @return {Position}\n   */\n  getCalculatedPosition() {\n    const body = this.document.body;\n    const documentElement = this.document.documentElement;\n    const window = this.window;\n\n    const scrollTop = this.window.pageYOffset || documentElement.scrollTop || body.scrollTop;\n    const scrollLeft = window.pageXOffset || documentElement.scrollLeft || body.scrollLeft;\n    const elementRect = this.node.getBoundingClientRect();\n\n    return new Position({\n      top: elementRect.top + scrollTop,\n      left: elementRect.left + scrollLeft,\n      right: elementRect.left + scrollLeft + elementRect.width,\n      bottom: elementRect.top + scrollTop + elementRect.height,\n    });\n  }\n\n  /**\n   * Gets the popover for the current element if any\n   * @returns {Popover|*}\n   * @public\n   */\n  getPopover() {\n    return this.popover;\n  }\n\n  /**\n   * Is called when element is about to be deselected\n   * i.e. when moving the focus to next element of closing\n   * @public\n   */\n  onDeselected(hideStage = false) {\n    this.hidePopover();\n\n    if (hideStage) {\n      this.hideStage();\n    }\n\n    this.removeHighlightClasses();\n\n    // If there was any animation in progress, cancel that\n    this.window.clearTimeout(this.animationTimeout);\n\n    if (this.options.onDeselected) {\n      this.options.onDeselected(this);\n    }\n  }\n\n  /**\n   * Checks if the given element is same as the current element\n   * @param {Element} element\n   * @returns {boolean}\n   * @public\n   */\n  isSame(element) {\n    if (!element || !element.node) {\n      return false;\n    }\n\n    return element.node === this.node;\n  }\n\n  /**\n   * Is called when the element is about to be highlighted\n   * @public\n   */\n  onHighlightStarted() {\n    if (this.options.onHighlightStarted) {\n      this.options.onHighlightStarted(this);\n    }\n  }\n\n  /**\n   * Is called when the element has been successfully highlighted\n   * @public\n   */\n  onHighlighted() {\n    const highlightedElement = this;\n    // Since bringInView() uses Element.scrollIntoViewIfNeeded() we always have to call it:\n    highlightedElement.bringInView();\n\n    // Show the popover and stage once the item has been\n    // brought in the view, this would allow us to handle\n    // the cases where the container has scroll overflow\n    this.showPopover();\n    this.showStage();\n    this.addHighlightClasses();\n\n    if (this.options.onHighlighted) {\n      this.options.onHighlighted(this);\n    }\n  }\n\n  /**\n   * Removes the stacking context fix classes and the highlighter classes\n   * @private\n   */\n  removeHighlightClasses() {\n    this.node.classList.remove(CLASS_DRIVER_HIGHLIGHTED_ELEMENT);\n    this.node.classList.remove(CLASS_POSITION_RELATIVE);\n\n    const stackFixes = this.document.querySelectorAll(`.${CLASS_FIX_STACKING_CONTEXT}`);\n    for (let counter = 0; counter < stackFixes.length; counter++) {\n      stackFixes[counter].classList.remove(CLASS_FIX_STACKING_CONTEXT);\n    }\n  }\n\n  /**\n   * Adds the highlight class on the current element and \"fixes\"\n   * the parent nodes if they\n   * @private\n   */\n  addHighlightClasses() {\n    this.node.classList.add(CLASS_DRIVER_HIGHLIGHTED_ELEMENT);\n\n    // Don't make relative if element already has some position set\n    if (this.canMakeRelative()) {\n      this.node.classList.add(CLASS_POSITION_RELATIVE);\n    }\n\n    // Check and re-define the stacking context\n    this.fixStackingContext();\n  }\n\n  /**\n   * Walks through the parents of the current element and fixes\n   * the stacking context\n   * @private\n   */\n  fixStackingContext() {\n    let parentNode = this.node.parentNode;\n    while (parentNode) {\n      if (!parentNode.tagName || parentNode.tagName.toLowerCase() === 'body') {\n        break;\n      }\n\n      const zIndex = getStyleProperty(parentNode, 'z-index');\n      const opacity = parseFloat(getStyleProperty(parentNode, 'opacity'));\n      const transform = getStyleProperty(parentNode, 'transform', true);\n      const transformStyle = getStyleProperty(parentNode, 'transform-style', true);\n      const transformBox = getStyleProperty(parentNode, 'transform-box', true);\n      const filter = getStyleProperty(parentNode, 'filter', true);\n      const perspective = getStyleProperty(parentNode, 'perspective', true);\n\n      // Stacking context gets disturbed if\n      // - Parent has z-index\n      // - Opacity is below 0\n      // - Filter/transform or perspective is applied\n      if (\n        /[0-9]+/.test(zIndex)\n        || opacity < 1\n        || (transform && transform !== 'none')\n        || (transformStyle && transformStyle !== 'flat')\n        || (transformBox && transformBox !== 'border-box')\n        || (filter && filter !== 'none')\n        || (perspective && perspective !== 'none')\n      ) {\n        parentNode.classList.add(CLASS_FIX_STACKING_CONTEXT);\n      }\n\n      parentNode = parentNode.parentNode;\n    }\n  }\n\n  /**\n   * Checks if we can make the current element relative or not\n   * @return {boolean}\n   * @private\n   */\n  canMakeRelative() {\n    const currentPosition = this.getStyleProperty('position');\n    const avoidPositionsList = ['absolute', 'fixed', 'relative'];\n\n    // Because if the element has any of these positions, making it\n    // relative will break the UI\n    return avoidPositionsList.indexOf(currentPosition) === -1;\n  }\n\n  /**\n   * Get current element's CSS attribute value\n   * @param {string} property\n   * @returns string\n   * @private\n   */\n  getStyleProperty(property) {\n    return getStyleProperty(this.node, property);\n  }\n\n  /**\n   * Shows the stage behind the element\n   * @public\n   */\n  showStage() {\n    this.stage.show(this.getCalculatedPosition());\n  }\n\n  /**\n   * Gets the DOM Element behind this element\n   * @returns {Node|HTMLElement|*}\n   * @public\n   */\n  getNode() {\n    return this.node;\n  }\n\n  /**\n   * Hides the stage\n   * @public\n   */\n  hideStage() {\n    this.stage.hide();\n  }\n\n  /**\n   * Hides the popover if possible\n   * @public\n   */\n  hidePopover() {\n    if (!this.popover) {\n      return;\n    }\n\n    this.popover.hide();\n  }\n\n  /**\n   * Shows the popover on the current element\n   * @public\n   */\n  showPopover() {\n    if (!this.popover) {\n      return;\n    }\n\n    const showAtPosition = this.getCalculatedPosition();\n\n    // For first highlight, show it immediately because there won't be any animation\n    let showAfterMs = ANIMATION_DURATION_MS;\n    // If animation is disabled or  if it is the first display, show it immediately\n    if (!this.options.animate || !this.overlay.lastHighlightedElement) {\n      showAfterMs = 0;\n    }\n\n    // @todo remove timeout and handle with CSS\n    this.animationTimeout = this.window.setTimeout(() => {\n      this.popover.show(showAtPosition);\n    }, showAfterMs);\n  }\n\n  /**\n   * @returns {{height: number, width: number}}\n   * @public\n   */\n  getFullPageSize() {\n    // eslint-disable-next-line prefer-destructuring\n    const body = this.document.body;\n    const html = this.document.documentElement;\n\n    return {\n      height: Math.max(body.scrollHeight, body.offsetHeight, html.scrollHeight, html.offsetHeight),\n      width: Math.max(body.scrollWidth, body.offsetWidth, html.scrollWidth, html.offsetWidth),\n    };\n  }\n\n  /**\n   * Gets the size for popover\n   * @returns {{height: number, width: number}}\n   * @public\n   */\n  getSize() {\n    return {\n      height: Math.max(this.node.scrollHeight, this.node.offsetHeight),\n      width: Math.max(this.node.scrollWidth, this.node.offsetWidth),\n    };\n  }\n}\n","import { ANIMATION_DURATION_MS, ID_OVERLAY, OVERLAY_HTML } from '../common/constants';\nimport { createNodeFromString } from '../common/utils';\n\n/**\n * Responsible for overlay creation and manipulation i.e.\n * cutting out the visible part, animating between the sections etc\n */\nexport default class Overlay {\n  /**\n   * @param {Object} options\n   * @param {Window} window\n   * @param {Document} document\n   */\n  constructor(options, window, document) {\n    this.options = options;\n\n    this.highlightedElement = null;              // currently highlighted dom element (instance of Element)\n    this.lastHighlightedElement = null;          // element that was highlighted before current one\n    this.hideTimer = null;\n\n    this.window = window;\n    this.document = document;\n\n    this.removeNode = this.removeNode.bind(this);\n  }\n\n  /**\n   * Prepares the overlay\n   * @private\n   */\n  attachNode() {\n    let pageOverlay = this.document.getElementById(ID_OVERLAY);\n    if (!pageOverlay) {\n      pageOverlay = createNodeFromString(OVERLAY_HTML);\n      document.body.appendChild(pageOverlay);\n    }\n\n    this.node = pageOverlay;\n    this.node.style.opacity = '0';\n\n    if (!this.options.animate) {\n      // For non-animation cases remove the overlay because we achieve this overlay by having\n      // a higher box-shadow on the stage. Why are we doing it that way? Because the stage that\n      // is shown \"behind\" the highlighted element to make it pop out of the screen, it introduces\n      // some stacking contexts issues. To avoid those issues we just make the stage background\n      // transparent and achieve the overlay using the shadow so to make the element below it visible\n      // through the stage even if there are stacking issues.\n      if (this.node.parentElement) {\n        this.node.parentElement.removeChild(this.node);\n      }\n    }\n  }\n\n  /**\n   * Highlights the dom element on the screen\n   * @param {Element} element\n   * @public\n   */\n  highlight(element) {\n    if (!element || !element.node) {\n      console.warn('Invalid element to highlight. Must be an instance of `Element`');\n      return;\n    }\n\n    // If highlighted element is not changed from last time\n    if (element.isSame(this.highlightedElement)) {\n      return;\n    }\n\n    // There might be hide timer from last time\n    // which might be getting triggered\n    this.window.clearTimeout(this.hideTimer);\n\n    // Trigger the hook for highlight started\n    element.onHighlightStarted();\n\n    // Old element has been deselected\n    if (this.highlightedElement && !this.highlightedElement.isSame(this.lastHighlightedElement)) {\n      this.highlightedElement.onDeselected();\n    }\n\n    // get the position of element around which we need to draw\n    const position = element.getCalculatedPosition();\n    if (!position.canHighlight()) {\n      return;\n    }\n\n    this.lastHighlightedElement = this.highlightedElement;\n    this.highlightedElement = element;\n\n    this.show();\n\n    // Element has been highlighted\n    this.highlightedElement.onHighlighted();\n  }\n\n  /**\n   * Shows the overlay on whole screen\n   * @public\n   */\n  show() {\n    if (this.node && this.node.parentElement) {\n      return;\n    }\n\n    this.attachNode();\n\n    window.setTimeout(() => {\n      this.node.style.opacity = `${this.options.opacity}`;\n      this.node.style.position = 'fixed';\n      this.node.style.left = '0';\n      this.node.style.top = '0';\n      this.node.style.bottom = '0';\n      this.node.style.right = '0';\n    });\n  }\n\n  /**\n   * Returns the currently selected element\n   * @returns {null|*}\n   * @public\n   */\n  getHighlightedElement() {\n    return this.highlightedElement;\n  }\n\n  /**\n   * Gets the element that was highlighted before current element\n   * @returns {null|*}\n   * @public\n   */\n  getLastHighlightedElement() {\n    return this.lastHighlightedElement;\n  }\n\n  /**\n   * Removes the overlay and cancel any listeners\n   * @public\n   */\n  clear(immediate = false) {\n    // Callback for when overlay is about to be reset\n    if (this.options.onReset) {\n      this.options.onReset(this.highlightedElement);\n    }\n\n    // Deselect the highlighted element if any\n    if (this.highlightedElement) {\n      const hideStage = true;\n      this.highlightedElement.onDeselected(hideStage);\n    }\n\n    this.highlightedElement = null;\n    this.lastHighlightedElement = null;\n\n    if (!this.node) {\n      return;\n    }\n\n    // Clear any existing timers and remove node\n    this.window.clearTimeout(this.hideTimer);\n\n    if (this.options.animate && !immediate) {\n      this.node.style.opacity = '0';\n      this.hideTimer = this.window.setTimeout(this.removeNode, ANIMATION_DURATION_MS);\n    } else {\n      this.removeNode();\n    }\n  }\n\n  /**\n   * Removes the overlay node if it exists\n   * @private\n   */\n  removeNode() {\n    if (this.node && this.node.parentElement) {\n      this.node.parentElement.removeChild(this.node);\n    }\n  }\n\n  /**\n   * Refreshes the overlay i.e. sets the size according to current window size\n   * And moves the highlight around if necessary\n   * @public\n   */\n  refresh() {\n    // If no highlighted element, cancel the refresh\n    if (!this.highlightedElement) {\n      return;\n    }\n\n    // Reposition the stage and show popover\n    this.highlightedElement.showPopover();\n    this.highlightedElement.showStage();\n  }\n}\n","import Element from './element';\nimport {\n  CLASS_BTN_DISABLED,\n  CLASS_CLOSE_BTN,\n  CLASS_CLOSE_ONLY_BTN,\n  CLASS_NEXT_STEP_BTN,\n  CLASS_POPOVER_DESCRIPTION,\n  CLASS_POPOVER_FOOTER,\n  CLASS_POPOVER_TIP,\n  CLASS_POPOVER_TITLE,\n  CLASS_PREV_STEP_BTN,\n  ID_POPOVER,\n  POPOVER_HTML,\n} from '../common/constants';\nimport { createNodeFromString } from '../common/utils';\n\n/**\n * Popover that is displayed on top of the highlighted element\n */\nexport default class Popover extends Element {\n  /**\n   * @param {Object} options\n   * @param {Window} window\n   * @param {Document} document\n   */\n  constructor(options, window, document) {\n    super();\n\n    this.options = {\n      isFirst: true,\n      isLast: true,\n      totalCount: 1,\n      currentIndex: 0,\n      offset: 0,\n      showButtons: true,\n      closeBtnText: 'Close',\n      doneBtnText: 'Done',\n      startBtnText: 'Next &rarr;',\n      nextBtnText: 'Next &rarr;',\n      prevBtnText: '&larr; Previous',\n      ...options,\n    };\n\n    this.window = window;\n    this.document = document;\n  }\n\n  /**\n   * Prepares the dom element for popover\n   * @private\n   */\n  attachNode() {\n    let popover = this.document.getElementById(ID_POPOVER);\n    if (popover) {\n      popover.parentElement.removeChild(popover);\n    }\n\n    popover = createNodeFromString(POPOVER_HTML(this.options.className));\n    document.body.appendChild(popover);\n\n    this.node = popover;\n    this.tipNode = popover.querySelector(`.${CLASS_POPOVER_TIP}`);\n    this.titleNode = popover.querySelector(`.${CLASS_POPOVER_TITLE}`);\n    this.descriptionNode = popover.querySelector(`.${CLASS_POPOVER_DESCRIPTION}`);\n    this.footerNode = popover.querySelector(`.${CLASS_POPOVER_FOOTER}`);\n    this.nextBtnNode = popover.querySelector(`.${CLASS_NEXT_STEP_BTN}`);\n    this.prevBtnNode = popover.querySelector(`.${CLASS_PREV_STEP_BTN}`);\n    this.closeBtnNode = popover.querySelector(`.${CLASS_CLOSE_BTN}`);\n  }\n\n  /**\n   * Gets the title node for the popover\n   * @returns {Element | null | *}\n   * @public\n   */\n  getTitleNode() {\n    return this.titleNode;\n  }\n\n  /**\n   * Gets the description node for the popover\n   * @returns {Element | null | *}\n   * @public\n   */\n  getDescriptionNode() {\n    return this.descriptionNode;\n  }\n\n  /**\n   * Hides the popover\n   * @public\n   */\n  hide() {\n    // If hide is called when the node isn't created yet\n    if (!this.node) {\n      return;\n    }\n\n    this.node.style.display = 'none';\n  }\n\n  /**\n   * Sets the default state for the popover\n   * @private\n   */\n  setInitialState() {\n    this.node.style.display = 'block';\n    this.node.style.left = '0';\n    this.node.style.top = '0';\n    this.node.style.bottom = '';\n    this.node.style.right = '';\n\n    // Remove the positional classes from tip\n    this.node\n      .querySelector(`.${CLASS_POPOVER_TIP}`)\n      .className = CLASS_POPOVER_TIP;\n  }\n\n  /**\n   * Shows the popover at the given position\n   * @param {Position} position\n   * @public\n   */\n  show(position) {\n    this.attachNode();\n    this.setInitialState();\n\n    // Set the title and descriptions\n    this.titleNode.innerHTML = this.options.title;\n    this.descriptionNode.innerHTML = this.options.description || '';\n\n    this.renderFooter();\n\n    // Position the popover around the given position\n    switch (this.options.position) {\n      case 'left':\n      case 'left-top':\n        this.positionOnLeft(position);\n        break;\n      case 'left-center':\n        this.positionOnLeftCenter(position);\n        break;\n      case 'left-bottom':\n        this.positionOnLeftBottom(position);\n        break;\n      case 'right':\n      case 'right-top':\n        this.positionOnRight(position);\n        break;\n      case 'right-center':\n        this.positionOnRightCenter(position);\n        break;\n      case 'right-bottom':\n        this.positionOnRightBottom(position);\n        break;\n      case 'top':\n      case 'top-left':\n        this.positionOnTop(position);\n        break;\n      case 'top-center':\n        this.positionOnTopCenter(position);\n        break;\n      case 'top-right':\n        this.positionOnTopRight(position);\n        break;\n      case 'bottom':\n      case 'bottom-left':\n        this.positionOnBottom(position);\n        break;\n      case 'bottom-center':\n        this.positionOnBottomCenter(position);\n        break;\n      case 'bottom-right':\n        this.positionOnBottomRight(position);\n        break;\n      case 'mid-center':\n        this.positionOnMidCenter(position);\n        break;\n      case 'auto':\n      default:\n        this.autoPosition(position);\n        break;\n    }\n\n    // Bring the popover in view port once it is displayed\n    this.bringInView();\n  }\n\n  /**\n   * Enables, disables buttons, sets the text and\n   * decides if to show them or not\n   * @private\n   */\n  renderFooter() {\n    this.nextBtnNode.innerHTML = this.options.nextBtnText;\n    this.prevBtnNode.innerHTML = this.options.prevBtnText;\n    this.closeBtnNode.innerHTML = this.options.closeBtnText;\n\n    const hasSteps = this.options.totalCount && this.options.totalCount !== 1;\n\n    // If there was only one item, hide the buttons\n    if (!this.options.showButtons) {\n      this.footerNode.style.display = 'none';\n      return;\n    }\n\n    // If this is just a single highlighted element i.e. there\n    // are no other steps to go to – just hide the navigation buttons\n    if (!hasSteps) {\n      this.nextBtnNode.style.display = 'none';\n      this.prevBtnNode.style.display = 'none';\n      this.closeBtnNode.classList.add(CLASS_CLOSE_ONLY_BTN);\n    } else {\n      // @todo modify CSS to use block\n      this.nextBtnNode.style.display = 'inline-block';\n      this.prevBtnNode.style.display = 'inline-block';\n      this.closeBtnNode.classList.remove(CLASS_CLOSE_ONLY_BTN);\n    }\n\n    this.footerNode.style.display = 'block';\n    if (this.options.isFirst) {\n      this.prevBtnNode.classList.add(CLASS_BTN_DISABLED);\n      this.nextBtnNode.innerHTML = this.options.startBtnText;\n    } else {\n      this.prevBtnNode.classList.remove(CLASS_BTN_DISABLED);\n    }\n\n    if (this.options.isLast) {\n      this.nextBtnNode.innerHTML = this.options.doneBtnText;\n    } else {\n      this.nextBtnNode.innerHTML = this.options.nextBtnText;\n    }\n  }\n\n  /**\n   * Shows the popover on the left of the given position\n   * @param {Position} elementPosition\n   * @private\n   */\n  positionOnLeft(elementPosition) {\n    const popoverWidth = this.getSize().width;\n    const popoverMargin = this.options.padding + 10;  // adding 10 to give it a little distance from the element\n\n    this.node.style.left = `${elementPosition.left - popoverWidth - popoverMargin}px`;\n    this.node.style.top = `${(elementPosition.top + this.options.offset) - this.options.padding}px`;\n    this.node.style.right = '';\n    this.node.style.bottom = '';\n\n    this.tipNode.classList.add('right');\n  }\n\n  /**\n   * Shows the popover on the left of the given position\n   * @param {Position} elementPosition\n   * @private\n   */\n  positionOnLeftBottom(elementPosition) {\n    const popoverDimensions = this.getSize();\n\n    const popoverWidth = popoverDimensions.width;\n    const popoverMargin = this.options.padding + 10;  // adding 10 to give it a little distance from the element\n\n    this.node.style.left = `${elementPosition.left - popoverWidth - popoverMargin}px`;\n    this.node.style.top = `${(elementPosition.bottom + this.options.padding + this.options.offset) - popoverDimensions.height}px`;\n    this.node.style.bottom = '';\n    this.node.style.right = '';\n\n    this.tipNode.classList.add('right', 'position-bottom');\n  }\n\n  /**\n   * Shows the popover on the left center of the given position\n   * @param {Position} elementPosition\n   * @private\n   */\n  positionOnLeftCenter(elementPosition) {\n    const popoverDimensions = this.getSize();\n\n    const popoverWidth = popoverDimensions.width;\n    const popoverHeight = popoverDimensions.height;\n    const popoverCenter = popoverHeight / 2;\n\n    const popoverMargin = this.options.padding + 10;  // adding 10 to give it a little distance from the element\n    const elementCenter = (elementPosition.bottom - elementPosition.top) / 2;\n    const topCenterPosition = (elementPosition.top - popoverCenter) + elementCenter + this.options.offset;\n\n    this.node.style.left = `${elementPosition.left - popoverWidth - popoverMargin}px`;\n    this.node.style.top = `${topCenterPosition}px`;\n    this.node.style.right = '';\n    this.node.style.bottom = '';\n\n    this.tipNode.classList.add('right', 'position-center');\n  }\n\n  /**\n   * Shows the popover on the right of the given position\n   * @param {Position} elementPosition\n   * @private\n   */\n  positionOnRight(elementPosition) {\n    const popoverMargin = this.options.padding + 10;  // adding 10 to give it a little distance from the element\n\n    this.node.style.left = `${elementPosition.right + popoverMargin}px`;\n    this.node.style.top = `${(elementPosition.top + this.options.offset) - this.options.padding}px`;\n    this.node.style.right = '';\n    this.node.style.bottom = '';\n\n    this.tipNode.classList.add('left');\n  }\n\n  /**\n   * Shows the popover on the right of the given position\n   * @param {Position} elementPosition\n   * @private\n   */\n  positionOnRightCenter(elementPosition) {\n    const popoverDimensions = this.getSize();\n    const popoverMargin = this.options.padding + 10;  // adding 10 to give it a little distance from the element\n\n    const popoverHeight = popoverDimensions.height;\n    const popoverCenter = popoverHeight / 2;\n    const elementCenter = (elementPosition.bottom - elementPosition.top) / 2;\n    const topCenterPosition = (elementPosition.top - popoverCenter) + elementCenter + this.options.offset;\n\n    this.node.style.left = `${elementPosition.right + popoverMargin}px`;\n    this.node.style.top = `${topCenterPosition}px`;\n    this.node.style.right = '';\n    this.node.style.bottom = '';\n\n    this.tipNode.classList.add('left', 'position-center');\n  }\n\n  /**\n   * Shows the popover on the right of the given position\n   * @param {Position} elementPosition\n   * @private\n   */\n  positionOnRightBottom(elementPosition) {\n    const popoverMargin = this.options.padding + 10;  // adding 10 to give it a little distance from the element\n    const popoverDimensions = this.getSize();\n\n    this.node.style.left = `${elementPosition.right + popoverMargin}px`;\n    this.node.style.top = `${(elementPosition.bottom + this.options.padding + this.options.offset) - popoverDimensions.height}px`;\n    this.node.style.bottom = '';\n    this.node.style.right = '';\n\n    this.tipNode.classList.add('left', 'position-bottom');\n  }\n\n  /**\n   * Shows the popover on the top of the given position\n   * @param {Position} elementPosition\n   * @private\n   */\n  positionOnTop(elementPosition) {\n    const popoverHeight = this.getSize().height;\n    const popoverMargin = this.options.padding + 10;  // adding 10 to give it a little distance from the element\n\n    this.node.style.top = `${elementPosition.top - popoverHeight - popoverMargin}px`;\n    this.node.style.left = `${(elementPosition.left - this.options.padding) + this.options.offset}px`;\n    this.node.style.right = '';\n    this.node.style.bottom = '';\n\n    this.tipNode.classList.add('bottom');\n  }\n\n  /**\n   * Shows the popover on the top center of the given position\n   * @param {Position} elementPosition\n   * @private\n   */\n  positionOnTopCenter(elementPosition) {\n    const dimensions = this.getSize();\n    const popoverHeight = dimensions.height;\n    const popoverWidth = dimensions.width / 2;\n\n    const popoverMargin = this.options.padding + 10;  // adding 10 to give it a little distance from the element\n    const nodeCenter = this.options.offset + elementPosition.left + ((elementPosition.right - elementPosition.left) / 2);\n\n    this.node.style.top = `${elementPosition.top - popoverHeight - popoverMargin}px`;\n    this.node.style.left = `${nodeCenter - popoverWidth - this.options.padding}px`;\n    this.node.style.right = '';\n    this.node.style.bottom = '';\n\n    // Add the tip at the top center\n    this.tipNode.classList.add('bottom', 'position-center');\n  }\n\n  /**\n   * Shows the popover on the top right of the given position\n   * @param {Position} elementPosition\n   * @private\n   */\n  positionOnTopRight(elementPosition) {\n    const dimensions = this.getSize();\n    const popoverHeight = dimensions.height;\n    const popoverMargin = this.options.padding + 10;  // adding 10 to give it a little distance from the element\n\n    this.node.style.top = `${elementPosition.top - popoverHeight - popoverMargin}px`;\n    this.node.style.left = `${(elementPosition.right + this.options.padding + this.options.offset) - dimensions.width}px`;\n    this.node.style.right = '';\n    this.node.style.bottom = '';\n\n    // Add the tip at the top center\n    this.tipNode.classList.add('bottom', 'position-right');\n  }\n\n  /**\n   * Shows the popover on the bottom of the given position\n   * @param {Position} elementPosition\n   * @private\n   */\n  positionOnBottom(elementPosition) {\n    const popoverMargin = this.options.padding + 10;  // adding 10 to give it a little distance from the element\n\n    this.node.style.top = `${elementPosition.bottom + popoverMargin}px`;\n    this.node.style.left = `${(elementPosition.left - this.options.padding) + this.options.offset}px`;\n    this.node.style.right = '';\n    this.node.style.bottom = '';\n\n    this.tipNode.classList.add('top');\n  }\n\n  /**\n   * Shows the popover on the bottom-center of the given position\n   * @param {Position} elementPosition\n   * @private\n   */\n  positionOnBottomCenter(elementPosition) {\n    const popoverWidth = this.getSize().width / 2;\n    const popoverMargin = this.options.padding + 10;  // adding 10 to give it a little distance from the element\n    const nodeCenter = this.options.offset + elementPosition.left + ((elementPosition.right - elementPosition.left) / 2);\n\n    this.node.style.top = `${elementPosition.bottom + popoverMargin}px`;\n    this.node.style.left = `${nodeCenter - popoverWidth - this.options.padding}px`;\n    this.node.style.right = '';\n    this.node.style.bottom = '';\n\n    // Add the tip at the top center\n    this.tipNode.classList.add('top', 'position-center');\n  }\n\n  /**\n   * Shows the popover on the bottom-right of the given position\n   * @param {Position} elementPosition\n   * @private\n   */\n  positionOnBottomRight(elementPosition) {\n    const dimensions = this.getSize();\n    const popoverMargin = this.options.padding + 10;  // adding 10 to give it a little distance from the element\n\n    this.node.style.top = `${elementPosition.bottom + popoverMargin}px`;\n    this.node.style.left = `${(elementPosition.right + this.options.padding + this.options.offset) - dimensions.width}px`;\n    this.node.style.right = '';\n    this.node.style.bottom = '';\n\n    // Add the tip at the top center\n    this.tipNode.classList.add('top', 'position-right');\n  }\n\n  /**\n   * Shows the popover on the mid-center of the given position\n   * @param {Position} elementPosition\n   * @private\n   */\n  positionOnMidCenter(elementPosition) {\n    const popoverDimensions = this.getSize();\n    const popoverHeight = popoverDimensions.height;\n    const popoverWidth = popoverDimensions.width / 2;\n    const popoverCenter = popoverHeight / 2;\n\n    const elementCenter = (elementPosition.bottom - elementPosition.top) / 2;\n    const topCenterPosition = (elementPosition.top - popoverCenter) + elementCenter + this.options.offset;\n    const nodeCenter = this.options.offset + elementPosition.left + ((elementPosition.right - elementPosition.left) / 2);\n\n    this.node.style.top = `${topCenterPosition}px`;\n    this.node.style.left = `${nodeCenter - popoverWidth - this.options.padding}px`;\n    this.node.style.right = '';\n    this.node.style.bottom = '';\n\n    // Add the tip at the top center\n    this.tipNode.classList.add('mid-center');\n  }\n\n  /**\n   * Automatically positions the popover around the given position\n   * such that the element and popover remain in view\n   * @todo add the left and right positioning decisions\n   * @param {Position} elementPosition\n   * @private\n   */\n  autoPosition(elementPosition) {\n    const pageSize = this.getFullPageSize();\n    const popoverSize = this.getSize();\n\n    const pageHeight = pageSize.height;\n    const popoverHeight = popoverSize.height;\n    const popoverMargin = this.options.padding + 10;  // adding 10 to give it a little distance from the element\n\n    const pageHeightAfterPopOver = elementPosition.bottom + popoverHeight + popoverMargin;\n\n    // If adding popover would go out of the window height, then show it to the top\n    if (pageHeightAfterPopOver >= pageHeight) {\n      this.positionOnTop(elementPosition);\n    } else {\n      this.positionOnBottom(elementPosition);\n    }\n  }\n}\n","/**\n * Responsible for validating positions and is used\n * when manipulating positions across the application\n */\nexport default class Position {\n  /**\n   * @param {number} left\n   * @param {number} top\n   * @param {number} right\n   * @param {number} bottom\n   */\n  constructor({\n    left = 0,\n    top = 0,\n    right = 0,\n    bottom = 0,\n  } = {}) {\n    this.left = left;\n    this.right = right;\n    this.top = top;\n    this.bottom = bottom;\n  }\n\n  /**\n   * Checks if the position is valid to be highlighted\n   * @returns {boolean}\n   * @public\n   */\n  canHighlight() {\n    return this.left < this.right && this.top < this.bottom;\n  }\n}\n","import { CLASS_STAGE_NO_ANIMATION, ID_STAGE, STAGE_HTML } from '../common/constants';\nimport { createNodeFromString } from '../common/utils';\nimport Element from './element';\n\n/**\n * Stage behind the highlighted element to give it a little\n * highlight from rest of the page\n */\nexport default class Stage extends Element {\n  /**\n   * @param {Object} options\n   * @param {Window} window\n   * @param {Document} document\n   */\n  constructor(options, window, document) {\n    super();\n\n    this.options = options;\n    this.window = window;\n    this.document = document;\n  }\n\n  /**\n   * Prepares the DOM element if not already there\n   * @private\n   */\n  attachNode() {\n    let stage = this.document.getElementById(ID_STAGE);\n    if (!stage) {\n      stage = createNodeFromString(STAGE_HTML);\n      document.body.appendChild(stage);\n    }\n\n    this.node = stage;\n\n    if (!this.options.animate) {\n      this.node.classList.add(CLASS_STAGE_NO_ANIMATION);\n    } else {\n      this.node.classList.remove(CLASS_STAGE_NO_ANIMATION);\n    }\n  }\n\n  /**\n   * Simply hides the stage\n   * @public\n   */\n  hide() {\n    if (!this.node || !this.node.parentElement) {\n      return;\n    }\n\n    this.node.parentElement.removeChild(this.node);\n  }\n\n  /**\n   * Makes it visible and sets the default properties\n   * @private\n   */\n  setInitialStyle() {\n    this.node.style.display = 'block';\n    this.node.style.left = '0';\n    this.node.style.top = '0';\n    this.node.style.bottom = '';\n    this.node.style.right = '';\n  }\n\n  /**\n   * Shows the stage at provided position\n   * @param {Position} position\n   * @public\n   */\n  show(position) {\n    this.attachNode();\n\n    this.setInitialStyle();\n\n    // Make it two times the padding because, half will be given on left and half on right\n    const requiredPadding = this.options.padding * 2;\n\n    const width = (position.right - position.left) + (requiredPadding);\n    const height = (position.bottom - position.top) + (requiredPadding);\n\n    // Show the stage\n    this.node.style.display = 'block';\n    this.node.style.position = 'absolute';\n    this.node.style.width = `${width}px`;\n    this.node.style.height = `${height}px`;\n    this.node.style.top = `${position.top - (requiredPadding / 2)}px`;\n    this.node.style.left = `${position.left - (requiredPadding / 2)}px`;\n    this.node.style.backgroundColor = this.options.stageBackground;\n  }\n}\n","// removed by extract-text-webpack-plugin","import Overlay from './core/overlay';\nimport Element from './core/element';\nimport Popover from './core/popover';\nimport {\n  CLASS_CLOSE_BTN,\n  CLASS_NEXT_STEP_BTN,\n  CLASS_PREV_STEP_BTN,\n  ESC_KEY_CODE,\n  ID_POPOVER,\n  LEFT_KEY_CODE,\n  OVERLAY_OPACITY,\n  OVERLAY_PADDING,\n  RIGHT_KEY_CODE,\n  SHOULD_ANIMATE_OVERLAY,\n  SHOULD_OUTSIDE_CLICK_CLOSE,\n  SHOULD_OUTSIDE_CLICK_NEXT,\n  ALLOW_KEYBOARD_CONTROL,\n} from './common/constants';\nimport Stage from './core/stage';\nimport { isDomElement } from './common/utils';\n\n/**\n * Plugin class that drives the plugin\n */\nexport default class Driver {\n  /**\n   * @param {Object} options\n   */\n  constructor(options = {}) {\n    this.options = {\n      animate: SHOULD_ANIMATE_OVERLAY, // Whether to animate or not\n      opacity: OVERLAY_OPACITY,    // Overlay opacity\n      padding: OVERLAY_PADDING,    // Spacing around the element from the overlay\n      scrollIntoViewOptions: null, // Options to be passed to `scrollIntoView`\n      allowClose: SHOULD_OUTSIDE_CLICK_CLOSE,      // Whether to close overlay on click outside the element\n      keyboardControl: ALLOW_KEYBOARD_CONTROL,     // Whether to allow controlling through keyboard or not\n      overlayClickNext: SHOULD_OUTSIDE_CLICK_NEXT, // Whether to move next on click outside the element\n      stageBackground: '#ffffff',       // Background color for the stage\n      onHighlightStarted: () => null,   // When element is about to be highlighted\n      onHighlighted: () => null,        // When element has been highlighted\n      onDeselected: () => null,         // When the element has been deselected\n      onReset: () => null,              // When overlay is about to be cleared\n      onNext: () => null,               // When next button is clicked\n      onPrevious: () => null,           // When previous button is clicked\n      ...options,\n    };\n\n    this.document = document;\n    this.window = window;\n    this.isActivated = false;\n    this.steps = [];                    // steps to be presented if any\n    this.currentStep = 0;               // index for the currently highlighted step\n    this.currentMovePrevented = false;  // If the current move was prevented\n\n    this.overlay = new Overlay(this.options, window, document);\n\n    this.onResize = this.onResize.bind(this);\n    this.onKeyUp = this.onKeyUp.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.moveNext = this.moveNext.bind(this);\n    this.movePrevious = this.movePrevious.bind(this);\n    this.preventMove = this.preventMove.bind(this);\n\n    // Event bindings\n    this.bind();\n  }\n\n  /**\n   * Getter for steps property\n   * @readonly\n   * @public\n   */\n  getSteps() {\n    return this.steps;\n  }\n\n  /**\n   * Setter for steps property\n   * @param steps\n   * @public\n   */\n  setSteps(steps) {\n    this.steps = steps;\n  }\n\n  /**\n   * Binds any DOM events listeners\n   * @todo: add throttling in all the listeners\n   * @private\n   */\n  bind() {\n    this.window.addEventListener('resize', this.onResize, false);\n    this.window.addEventListener('keyup', this.onKeyUp, false);\n\n    // Binding both touch and click results in popup getting shown and then immediately get hidden.\n    // Adding the check to not bind the click event if the touch is supported i.e. on mobile devices\n    // Issue: https://github.com/kamranahmedse/driver.js/issues/150\n    if (!('ontouchstart' in document.documentElement)) {\n      this.window.addEventListener('click', this.onClick, false);\n    } else {\n      this.window.addEventListener('touchstart', this.onClick, false);\n    }\n  }\n\n  /**\n   * Removes the popover if clicked outside the highlighted element\n   * or outside the\n   * @param e\n   * @private\n   */\n  onClick(e) {\n    if (!this.isActivated || !this.hasHighlightedElement()) {\n      return;\n    }\n\n    // Stop the event propagation on click/tap. `onClick` handles\n    // both touch and click events – which on some browsers causes\n    // the click to close the tour\n    e.stopPropagation();\n\n    const highlightedElement = this.overlay.getHighlightedElement();\n    const popover = this.document.getElementById(ID_POPOVER);\n\n    const clickedHighlightedElement = highlightedElement.node.contains(e.target);\n    const clickedPopover = popover && popover.contains(e.target);\n\n    // Perform the 'Next' operation when clicked outside the highlighted element\n    if (!clickedHighlightedElement && !clickedPopover && this.options.overlayClickNext) {\n      this.handleNext();\n      return;\n    }\n\n    // Remove the overlay If clicked outside the highlighted element\n    if (!clickedHighlightedElement && !clickedPopover && this.options.allowClose) {\n      this.reset();\n      return;\n    }\n\n    const nextClicked = e.target.classList.contains(CLASS_NEXT_STEP_BTN);\n    const prevClicked = e.target.classList.contains(CLASS_PREV_STEP_BTN);\n    const closeClicked = e.target.classList.contains(CLASS_CLOSE_BTN);\n\n    if (closeClicked) {\n      this.reset();\n      return;\n    }\n\n    if (nextClicked) {\n      this.handleNext();\n    } else if (prevClicked) {\n      this.handlePrevious();\n    }\n  }\n\n  /**\n   * Handler for the onResize DOM event\n   * Makes sure highlighted element stays at valid position\n   * @private\n   */\n  onResize() {\n    if (!this.isActivated) {\n      return;\n    }\n\n    this.refresh();\n  }\n\n  /**\n   * Refreshes and repositions the popover and the overlay\n   */\n  refresh() {\n    this.overlay.refresh();\n  }\n\n  /**\n   * Clears the overlay on escape key process\n   * @param event\n   * @private\n   */\n  onKeyUp(event) {\n    // If driver is not active or keyboard control is disabled\n    if (!this.isActivated || !this.options.keyboardControl) {\n      return;\n    }\n\n    // If escape was pressed and it is allowed to click outside to close\n    if (event.keyCode === ESC_KEY_CODE && this.options.allowClose) {\n      this.reset();\n      return;\n    }\n\n    // If there is no highlighted element or there is a highlighted element\n    // without popover or if the popover does not allow buttons - ignore\n    const highlightedElement = this.getHighlightedElement();\n    if (!highlightedElement || !highlightedElement.popover) {\n      return;\n    }\n\n    if (event.keyCode === RIGHT_KEY_CODE) {\n      this.handleNext();\n    } else if (event.keyCode === LEFT_KEY_CODE) {\n      this.handlePrevious();\n    }\n  }\n\n  /**\n   * Moves to the previous step if possible\n   * otherwise resets the overlay\n   * @public\n   */\n  movePrevious() {\n    const previousStep = this.steps[this.currentStep - 1];\n    if (!previousStep) {\n      this.reset();\n      return;\n    }\n\n    this.overlay.highlight(previousStep);\n    this.currentStep -= 1;\n  }\n\n  /**\n   * Prevents the current move. Useful in `onNext` if you want to\n   * perform some asynchronous task and manually move to next step\n   * @public\n   */\n  preventMove() {\n    this.currentMovePrevented = true;\n  }\n\n  /**\n   * Handles the internal \"move to next\" event\n   * @private\n   */\n  handleNext() {\n    this.currentMovePrevented = false;\n\n    // Call the bound `onNext` handler if available\n    const currentStep = this.steps[this.currentStep];\n    if (currentStep && currentStep.options && currentStep.options.onNext) {\n      currentStep.options.onNext(this.overlay.highlightedElement);\n    }\n\n    if (this.currentMovePrevented) {\n      return;\n    }\n\n    this.moveNext();\n  }\n\n  /**\n   * Handles the internal \"move to previous\" event\n   * @private\n   */\n  handlePrevious() {\n    this.currentMovePrevented = false;\n\n    // Call the bound `onPrevious` handler if available\n    const currentStep = this.steps[this.currentStep];\n    if (currentStep && currentStep.options && currentStep.options.onPrevious) {\n      currentStep.options.onPrevious(this.overlay.highlightedElement);\n    }\n\n    if (this.currentMovePrevented) {\n      return;\n    }\n\n    this.movePrevious();\n  }\n\n  /**\n   * Moves to the next step if possible\n   * otherwise resets the overlay\n   * @public\n   */\n  moveNext() {\n    const nextStep = this.steps[this.currentStep + 1];\n    if (!nextStep) {\n      this.reset();\n      return;\n    }\n\n    this.overlay.highlight(nextStep);\n    this.currentStep += 1;\n  }\n\n  /**\n   * @returns {boolean}\n   * @public\n   */\n  hasNextStep() {\n    return !!this.steps[this.currentStep + 1];\n  }\n\n  /**\n   * @returns {boolean}\n   * @public\n   */\n  hasPreviousStep() {\n    return !!this.steps[this.currentStep - 1];\n  }\n\n  /**\n   * Resets the steps if any and clears the overlay\n   * @param {boolean} immediate\n   * @public\n   */\n  reset(immediate = false) {\n    this.currentStep = 0;\n    this.isActivated = false;\n    this.overlay.clear(immediate);\n  }\n\n  /**\n   * Checks if there is any highlighted element or not\n   * @returns {boolean}\n   * @public\n   */\n  hasHighlightedElement() {\n    const highlightedElement = this.overlay.getHighlightedElement();\n    return highlightedElement && highlightedElement.node;\n  }\n\n  /**\n   * Gets the currently highlighted element in overlay\n   * @returns {Element}\n   * @public\n   */\n  getHighlightedElement() {\n    return this.overlay.getHighlightedElement();\n  }\n\n  /**\n   * Gets the element that was highlighted before currently highlighted element\n   * @returns {Element}\n   * @public\n   */\n  getLastHighlightedElement() {\n    return this.overlay.getLastHighlightedElement();\n  }\n\n  /**\n   * Defines steps to be highlighted\n   * @param {array} steps\n   * @public\n   */\n  defineSteps(steps) {\n    this.steps = [];\n\n    for (let counter = 0; counter < steps.length; counter++) {\n      const element = this.prepareElementFromStep(steps[counter], steps, counter);\n      if (!element) {\n        continue;\n      }\n\n      this.steps.push(element);\n    }\n  }\n\n  /**\n   * Prepares the step received from the user and returns an instance\n   * of Element\n   *\n   * @param currentStep Step that is being prepared\n   * @param allSteps  List of all the steps\n   * @param index Index of the current step\n   * @returns {null|Element}\n   * @private\n   */\n  prepareElementFromStep(currentStep, allSteps = [], index = 0) {\n    let elementOptions = { ...this.options };\n    let querySelector = currentStep;\n\n    // If the `currentStep` is step definition\n    // then grab the options and element from the definition\n    const isStepDefinition = typeof currentStep !== 'string' && !isDomElement(currentStep);\n\n    if (!currentStep || (isStepDefinition && !currentStep.element)) {\n      throw new Error(`Element is required in step ${index}`);\n    }\n\n    if (isStepDefinition) {\n      querySelector = currentStep.element;\n      elementOptions = { ...this.options, ...currentStep };\n    }\n\n    // If the given element is a query selector or a DOM element?\n    const domElement = isDomElement(querySelector) ? querySelector : this.document.querySelector(querySelector);\n    if (!domElement) {\n      console.warn(`Element to highlight ${querySelector} not found`);\n      return null;\n    }\n\n    let popover = null;\n    if (elementOptions.popover && elementOptions.popover.title) {\n      const mergedClassNames = [\n        this.options.className,\n        elementOptions.popover.className,\n      ].filter(c => c).join(' ');\n\n      const popoverOptions = {\n        ...elementOptions,\n        ...elementOptions.popover,\n        className: mergedClassNames,\n        totalCount: allSteps.length,\n        currentIndex: index,\n        isFirst: index === 0,\n        isLast: allSteps.length === 0 || index === allSteps.length - 1, // Only one item or last item\n      };\n\n      popover = new Popover(popoverOptions, this.window, this.document);\n    }\n\n    const stageOptions = { ...elementOptions };\n    const stage = new Stage(stageOptions, this.window, this.document);\n\n    return new Element({\n      node: domElement,\n      options: elementOptions,\n      popover,\n      stage,\n      overlay: this.overlay,\n      window: this.window,\n      document: this.document,\n    });\n  }\n\n  /**\n   * Initiates highlighting steps from first step\n   * @param {number} index at which highlight is to be started\n   * @public\n   */\n  start(index = 0) {\n    if (!this.steps || this.steps.length === 0) {\n      throw new Error('There are no steps defined to iterate');\n    }\n\n    this.isActivated = true;\n    this.currentStep = index;\n    this.overlay.highlight(this.steps[index]);\n  }\n\n  /**\n   * Highlights the given element\n   * @param {string|{element: string, popover: {}}} selector Query selector or a step definition\n   * @public\n   */\n  highlight(selector) {\n    this.isActivated = true;\n\n    const element = this.prepareElementFromStep(selector);\n    if (!element) {\n      return;\n    }\n\n    this.overlay.highlight(element);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAA;AAAA,yivjMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAafA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC1FA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;A","sourceRoot":""}